(function() {var implementors = {};
implementors["cargo_update"] = [{"text":"impl PartialOrd&lt;ConfigOperation&gt; for ConfigOperation","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;PackageConfig&gt; for PackageConfig","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;PackageFilterElement&gt; for PackageFilterElement","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl PartialOrd&lt;Sort&gt; for Sort","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;CredentialType&gt; for CredentialType","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IndexEntryFlag&gt; for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IndexEntryExtendedFlag&gt; for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IndexAddOption&gt; for IndexAddOption","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;RepositoryOpenFlags&gt; for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;RevparseMode&gt; for RevparseMode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;MergeAnalysis&gt; for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;MergePreference&gt; for MergePreference","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Oid&gt; for Oid","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; PartialOrd&lt;Reference&lt;'repo&gt;&gt; for Reference&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Time&gt; for Time","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IndexTime&gt; for IndexTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;TreeEntry&lt;'a&gt;&gt; for TreeEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Status&gt; for Status","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;RepositoryInitMode&gt; for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SubmoduleStatus&gt; for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;PathspecFlags&gt; for PathspecFlags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;CheckoutNotificationType&gt; for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;DiffStatsFormat&gt; for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;StashApplyFlags&gt; for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;StashFlags&gt; for StashFlags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;AttrCheckFlags&gt; for AttrCheckFlags","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl PartialOrd&lt;Level&gt; for Level","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LevelFilter&gt; for Level","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LevelFilter&gt; for LevelFilter","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Level&gt; for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;Metadata&lt;'a&gt;&gt; for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;MetadataBuilder&lt;'a&gt;&gt; for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl PartialOrd&lt;Ident&gt; for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl PartialOrd&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Position&gt; for Position","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Literal&gt; for Literal","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassUnicodeRange&gt; for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassBytesRange&gt; for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Sequence&gt; for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Range&gt; for Utf8Range","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl PartialOrd&lt;Identifier&gt; for Identifier","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SemVerError&gt; for SemVerError","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Version&gt; for Version","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;VersionReq&gt; for VersionReq","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;SmallVec&lt;A&gt;&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl PartialOrd&lt;Lifetime&gt; for Lifetime","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl PartialOrd&lt;Level&gt; for Level","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;PartialOrd&gt; PartialOrd&lt;Host&lt;S&gt;&gt; for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Url&gt; for Url","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;PartialOrd&gt; PartialOrd&lt;VecMap&lt;V&gt;&gt; for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()